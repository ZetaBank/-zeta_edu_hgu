Code Explanation
==================

Overall Explanation
--------------------

-   Check the contents of the 01_04_Depth_Comparison.py file as follows.

.. code-block:: python

    import pyrealsense2 as rs
    import numpy as np
    import cv2

    # Initialize the RealSense pipeline and configure streams
    pipeline = rs.pipeline()
    config = rs.config()
    config.enable_stream(rs.stream.depth, 640, 480, rs.format.z16, 30)
    config.enable_stream(rs.stream.color, 640, 480, rs.format.bgr8, 30)
    pipeline.start(config)

    while True:
        # Wait for a set of frames
        frames = pipeline.wait_for_frames()
        depth_frame = frames.get_depth_frame()
        color_frame = frames.get_color_frame()

        # Convert frames to OpenCV format
        depth_image = np.asanyarray(depth_frame.get_data())
        color_image = np.asanyarray(color_frame.get_data())

        # Convert depth image to a colormap
        depth_colormap = cv2.applyColorMap(cv2.convertScaleAbs(depth_image, alpha=0.03), cv2.COLORMAP_JET)

        # Display the depth and color images together
        combined_image = np.hstack((color_image, depth_colormap))
        cv2.imshow("Color and Depth", combined_image)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    pipeline.stop()
    cv2.destroyAllWindows()


Structure Explanation
--------------------

.. code-block:: python

    import pyrealsense2 as rs
    import numpy as np
    import cv2

- Here, the necessary libraries are imported. pyrealsense2 is the RealSense library, numpy is used for numerical operations, and cv2 is the OpenCV library for computer vision.

.. code-block:: python
    
    # Initialize the RealSense pipeline and configure streams
    pipeline = rs.pipeline()
    config = rs.config()
    config.enable_stream(rs.stream.depth, 640, 480, rs.format.z16, 30)
    config.enable_stream(rs.stream.color, 640, 480, rs.format.bgr8, 30)
    pipeline.start(config)

- In this section, the RealSense pipeline is initialized. The rs.config() method is used to create a configuration for the pipeline. Two streams are enabled: the depth stream with a resolution of 640x480 pixels, format z16 (16-bit depth values), and a frame rate of 30 frames per second. Similarly, the color stream with the same resolution, format bgr8 (8-bit blue, green, red channels), and a frame rate of 30 frames per second is enabled.

.. code-block:: python

    while True:
        # Wait for a set of frames
        frames = pipeline.wait_for_frames()
        depth_frame = frames.get_depth_frame()
        color_frame = frames.get_color_frame()

- This is the main loop of the program. It runs indefinitely and continuously captures frames from the camera. The pipeline.wait_for_frames() function blocks until a complete set of frames (depth and color) is available. The depth and color frames are then extracted from the set of frames.

.. code-block:: python

    # Convert frames to OpenCV format
    depth_image = np.asanyarray(depth_frame.get_data())
    color_image = np.asanyarray(color_frame.get_data())

- Here, the obtained depth and color frames are converted into OpenCV-compatible formats using NumPy arrays. This step allows us to manipulate the frames using OpenCV functions.

.. code-block:: python
    
    # Convert depth image to a colormap
    depth_colormap = cv2.applyColorMap(cv2.convertScaleAbs(depth_image, alpha=0.03), cv2.COLORMAP_JET)

- The depth image is transformed into a colormap to visualize depth variations. The cv2.convertScaleAbs function scales the depth values and takes the absolute values. The cv2.applyColorMap function then applies a colormap (in this case, 'JET') to the image.

.. code-block:: python
    
    # Display the depth and color images together
    combined_image = np.hstack((color_image, depth_colormap))
    cv2.imshow("Color and Depth", combined_image)

- The color image and the depth colormap are horizontally stacked together to create a single combined image. This combined image is displayed in a window titled "Color and Depth" using the cv2.imshow function from OpenCV.

.. code-block:: python

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
        
- The program waits for a key press. If the pressed key is 'q', the loop is exited and the program terminates.

.. code-block:: python

    pipeline.stop()
    cv2.destroyAllWindows()

- After the loop, the RealSense pipeline is stopped to release the camera resources, and all OpenCV windows are closed using the cv2.destroyAllWindows() function.

- In summary, this code sets up a RealSense camera, captures depth and color frames, converts them for OpenCV processing, applies a colormap to the depth data, and displays the combined result in a window. The loop continues until the user presses the 'q' key.